return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
cat("Nclusters = ",nClusters,"\n")
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
asdasd
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
asasd
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
gap = gap/nClusters
asasd
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers)
assas
kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
gap = gap/nClusters
cat("Gap = ",gap,"\n")
assas
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
cat("Gap1 = ",gap,"\n")
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
euclidean_distance2 = function(p1,p2){
d = length(p1)
dis = 0
for(i in 1:d){
dis = dis + (p1[i] - p2[i])^2
}
return (sqrt(dis))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
cat("Gap1 = ",gap,"\n")
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers,distance_function = euclidean_distance2)
kMeans(iris[,1:4],centers,distance_function = euclidean_distance)
kMeans(iris[,1:4],centers,distance_function = euclidean_distance2)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
cat("Distance = ",distance_function(last_centers[i,],clusters_centers[i,]),"\n")
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
cat("Gap1 = ",gap,"\n")
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers,distance_function = euclidean_distance2)
class(centers)
class(centers_c)
centers
centers_c
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
cat("Last = ",last_centers[i,],"\n")
cat("atual = ",clusters_centers[i,],"\n")
cat("Distance = ",distance_function(last_centers[i,],clusters_centers[i,]),"\n\n\n")
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
cat("Gap1 = ",gap,"\n")
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
centers_c
kMeans(iris[,1:4],centers,distance_function = euclidean_distance2)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
cat("data = ",data_clusters,"\n")
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
cat("Gap1 = ",gap,"\n")
gap = gap/nClusters
cat("Gap = ",gap,"\n")
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
kMeans(iris[,1:4],centers,distance_function = euclidean_distance2)
centers
centers = sample(iris[,1:4],size=3)
centers
iris
centers = iris[sample(1:nrow(iris),3,replace=FALSE),]
centers
centers = centers[,1:4]
centers
centers = as.matrix(centers)
centers
centers = unname(centers)
centers
kMeans(iris[,1:4],centers)
a = kMeans(iris[,1:4],centers)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
getDataClusters = function(dataset,clusters_centers,distance_function=euclidean_distance){
data_clusters = data_clusters = apply(dataset,1,function(row){
distance = distance_function(row,clusters_centers[1,])
index = 1
for(i in 2:nrow(clusters_centers)){
dAux = distance_function(row,clusters_centers[i,])
if(dAux < distance){
distance = dAux
index = i
}
}
return (index)
})
return(unname(data_clusters))
}
kMeans = function(dataset,clusters_centers,distance_function=euclidean_distance,threshold = 1e-3){
dataset = as.matrix(dataset)
nClusters = nrow(clusters_centers)
dimension = ncol(clusters_centers)
gap = 2 * threshold
while(gap > threshold){
data_clusters = getDataClusters(dataset,clusters_centers,distance_function)
last_centers = clusters_centers
for(i in 1:nClusters){
ids = which(data_clusters == i)
clusters_centers[i,] = colMeans(dataset[ids,])
}
gap = 0
for(i in 1:nClusters){
gap = gap + distance_function(last_centers[i,],clusters_centers[i,])
}
gap = gap/nClusters
}
ret = NULL
ret$clusters_centers = clusters_centers
ret$data_clusters = getDataClusters(dataset,clusters_centers)
return(ret)
}
a = kMeans(iris[,1:4],centers)
a
plot(iris[,1:2])
points(a$clusters_centers[,1:2],col="red")
plot(iris[,1:2],col=a$clusters_centers + 1)
plot(iris[,c(1,2)],col=a$clusters_centers + 1)
plot(iris[,c(1,3)],col=a$clusters_centers + 1)
plot(iris[,c(1,4)],col=a$clusters_centers + 1)
plot(iris[,c(2,4)],col=a$clusters_centers + 1)
plot(iris[,c(3,4)],col=a$clusters_centers + 1)
plot(iris[,c(2,3)],col=a$clusters_centers + 1)

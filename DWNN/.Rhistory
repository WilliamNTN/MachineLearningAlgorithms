return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
})
}
dwnn2(5,dataset,3,nClass=2)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
}
dwnn2(5,dataset,3,nClass=2)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=2)
test = null
test = NULL
test = rbind(test,c(1,1))
test = rbind(test,c(2,2))
test = rbind(test,c(2,2))
dataset
dwnn2(5,dataset,3,nClass=2)
dwnn2(5,dataset,3,nClass=1)
dataset[,3:3]
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
cat(car.index+1," ",ncol(dataset))
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
cat(car.index+1," ",ncol(dataset))
asdas
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
cat(car.index+1," ",ncol(dataset))
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
cat(var.index+1," ",ncol(dataset))
asdas
predictions = apply(dataset[,(var.index+1):ncol(dataset)],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,3:3],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,2:3],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,3:3],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,3:3,drop=F],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,(var.index+1):ncol(dataset),drop=F],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dwnn2(5,dataset,3,nClass=1)
dwnn2(5,dataset,1,nClass=1)
dwnn2(5,dataset,0,nClass=1)
dwnn2(5,dataset,0.1,nClass=1)
dwnn2(5,dataset,0.2,nClass=1)
dwnn2(5,dataset,0.0001,nClass=1)
dwnn2(5,dataset,5,nClass=1)
dataset
X = rnorm(n=200,mean=3,sd=1)
Y = rnorm(n=200,mean=3,sd=1)
dataset = cbind(X,Y)
dataset
t = c(rnorm(n=200,mean=-3,sd=1),rnorm(n=200,mean=-3,sd=1))
t
t
t = cbind(rnorm(n=200,mean=-3,sd=1),rnorm(n=200,mean=-3,sd=1))
t
dataset
dataset = rbind(dataset,t)
dataset
t = rbind(rep(1,200),rep(-1,200))
t
t
t = rep(1,200)
t
t2 = rep(-1,200)
t2
tf = rbind(t,t2)
tf
tf = cbind(t,t2)
tf
t = c(rep(1,200),rep(-1,200))
t
dataset
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, weight_function = weightedDistance, distance_function = euclidean_distance){
target.index = ncol(dataset)
sumD = sumDV = 0.0
for(i in 1:nrow(dataset)){
Yi = dataset[i,target.index]
Xi = dataset[i,1:(target.index-1)]
sumD = sumD + (Yi * weight_function(x,Xi,sigma,distance_function))
sumDV = sumDV + (weight_function(x,Xi,sigma,distance_function))
}
return(sumD/sumDV)
}
dwnn2 = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,(var.index+1):ncol(dataset),drop=F],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
dataset = cbind(dataset,t)
dataset
plot(dataset,col=dataset[,3]+2)
c = dwnn(c(-1,-0.5),dataset,nClass=1,sigma=3)
c = dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=3)
c
points(c(-1,-0.5),col=c)
points(c(-1,-0.5),col=2)
plot(dataset,col=dataset[,3])
plot(dataset,col=dataset[,3]+2)
x = c(x=-1,y=-0.5)
x
points(x,col=2)
plot(dataset,col=dataset[,3])
plot(dataset,col=dataset[,3]+2)
points(x=x[1],y=x[2],col=2)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=3)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=5)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=10)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=20)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=30)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=50)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=Inf)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=1)
dwnn2(c(-1,-0.5),dataset,nClass=1,sigma=0.5)
dwnn2(c(2,1),dataset,nClass=1,sigma=0.5)
euclidean_distance = function(p1,p2){
return(sqrt(sum((p1-p2)^2)))
}
weightedDistance = function(x1,x2,sigma,distance_function = euclidean_distance){
distance = euclidean_distance(x1,x2)
w = exp(-(distance^2)/(2 * (sigma^2)))
return (w)
}
dwnn = function(x, dataset, sigma, nClass = 1,weight_function = weightedDistance, distance_function = euclidean_distance){
var.index = ncol(dataset)-nClass
weights = apply(dataset,1,function(row){
row = row[1:(length(row)-nClass)]
(weightedDistance(x,row,sigma,distance_function))
})
predictions = apply(dataset[,(var.index+1):ncol(dataset),drop=F],2,function(col){
sumD = col %*% weights
sumDV = sum(weights)
sumD/sumDV
})
return(predictions)
}
